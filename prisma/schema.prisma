generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// *** PRODUCTS ***
model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String        @db.VarChar(1000)
  images      Image[]
  inStock     Int           @default(0)
  price       Float         @default(0)
  sizes       ProductSize[]
  slug        String        @unique
  tags        Tag[]
  type        Type
  gender      Gender
  orderItem   OrderItem[]

  @@index([title])
}

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url       String  @unique
  order     Int     @default(0)
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([productId, order])
  @@index([productId])
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model ProductSize {
  id      Int       @id @default(autoincrement())
  size    Size      @unique
  product Product[]
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Type {
  shirts
  pants
  hoodies
  hats
}

enum Gender {
  men
  women
  kid
  unisex
}

// *** USERS ***
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  email    String @unique
  password String
  role     Role   @default(client)

  orders Order[]
}

enum Role {
  admin
  client
  super_user
  seo
}

// *** ORDERS ***
model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  orderItems OrderItem[]

  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String          @unique

  paymentResult String?

  numberOfItems Int
  subTotal      Float
  tax           Float
  total         Float

  isPaid Boolean   @default(false)
  paidAt DateTime?

  transactionId String? @unique

  @@index([userId])
  @@index([shippingAddressId])
}

model OrderItem {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  title    String
  slug     String
  image    String
  size     Size
  gender   Gender
  quantity Int
  price    Float

  @@index([productId])
  @@index([orderId])
}

model ShippingAddress {
  id String @id @default(uuid())

  firstName String
  lastName  String
  address   String
  address2  String?
  zip       String
  state     String
  country   String
  phone     String

  order Order?
}
